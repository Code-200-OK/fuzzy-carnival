package chapter3_Stacks_Queues;

import java.util.Stack;

public class MinStack {
	private Stack<Integer> items;
	private int min;
	public MinStack(){
		items = new Stack<>();
		min = -1;
	}
	public void push(int item){
		if(items.isEmpty()){
			min = item;
			items.push(-1);		
		}
		else if(item < min){
			items.push(item-min);
			min = item;		
		}
		else{
			items.push(item);	
		}	
	}
	public int peek() throws Exception{
		if(items.isEmpty()) throw new Exception("Empty Stack");
		int top = items.peek();
		if(top<0){
			return min;		
		}
		else{
			return top + min;		
		}	
	}
	public int pop() throws Exception{
		if(items.isEmpty()) throw new Exception("Empty Stack");
		int top = items.pop();
		int toreturn;
		if(top<0){
			toreturn = min;
			min -= top;
			return toreturn;		
		}
		else{
			return top + min;		
		}
	}
	public boolean isEmpty(){
		return items.isEmpty();
	}
	public int min() throws Exception{
		if(items.isEmpty()) throw new Exception("Empty Stack");
		return min;
	}

	public static void main(String[] args) {
		MinStack obj = new MinStack();
		try{
			
		}catch(Exception e){
			System.out.println((e.printStackTrace());
		}
	}

}
