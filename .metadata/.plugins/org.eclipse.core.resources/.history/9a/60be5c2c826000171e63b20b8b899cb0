import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class Hello {
	static Log root = new Log("");
	static List<String> levels = Arrays.asList("Year","Month","Day","Hour","Minute","Second");
	static List<Integer> answer;
	static int[] indexes = {4,7,10,13,16,19};
	public Hello() {
		root = new Log("");
	}
	public static int[] extract(String timestamp){
		int[] ans = new int[6];
		String[] parts = timestamp.split(":");
		for(int i=0;i<parts.length;i++)
			ans[i] = Integer.parseInt(parts[i]);
		/*ans[0] %= 2000;
		ans[1] -= 1;
		ans[2] -= 1;*/
		/*ans[3] -= 1;
		ans[4] -= 1;
		ans[5] -= 1;*/

		return ans;
	}

	public static void put(int id, String timestamp) {
		int[] parts = extract(timestamp);
		int cur = 0;
		Log node = root;
		while(cur < 6){
			if(!node.children.containsKey(parts[cur]))
				node.children.put(parts[cur], new Log(Integer.toString(parts[cur])));
			node = node.children.get(parts[cur]);
			cur++;
		}
		node.children.put(id, new Log(Integer.toString(id)));

	}
	public static void traverse(Log node){
		if(node == null) return;
		System.out.println(node.data);
		for(Map.Entry<Integer, Log> e: node.children.entrySet()){
			traverse(e.getValue());
		}
	}
	public static void search(Log node,String s, String t, int curLevel, int destLevel, StringBuilder pre){
		if(curLevel>-1 && curLevel<=destLevel && 
				(pre.toString().compareTo(s.substring(0,indexes[curLevel]))<0 || 
						pre.toString().compareTo(t.substring(0,indexes[curLevel]))>0)) return;
		int l = pre.length();
		for(Map.Entry<Integer, Log> e: node.children.entrySet()){
			if()
		}
		
	}
	public static List<Integer> retrieve(String s, String t, String stype){
		answer = new ArrayList<Integer>();
		search(root,s,t,-1,indexes[levels.indexOf(stype)],new StringBuilder());
		int type = 0;
		if(stype.equals("Year")) type = 0;
		else if(stype.equals("Month")) type = 1;
		else if(stype.equals("Day")) type = 2;
		else if(stype.equals("Hour")) type = 3;
		else if(stype.equals("Minute")) type = 4;
		else if(stype.equals("Second")) type = 5;
		int[] parts = extract(s);
		int[] dparts = extract(t);

		List<Integer> answer = new ArrayList<Integer>();
		getAll(root,parts,dparts,answer,0,type,4);
		return answer;
		//return root.get(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5],dparts[0], dparts[1], dparts[2], dparts[3], dparts[4], dparts[5], type);
	}
	private static void getAll(Log node,int[] parts, int[] dparts, List<Integer> answer, int curDepth, int wantedDepth, int fanType) {
		System.out.println("At node:"+ node.data + "****"+curDepth+"****"+wantedDepth+"****"+fanType);

		if(curDepth==6){
			System.out.println("Adding"+node.children.keySet());
			for(Integer e: node.children.keySet())
				answer.add(e);
			return;
		}
		// type 1 all
		// type 2 left leave
		// type 3 right leave
		// type 4 left and right leave
		int start = fanType==4 || fanType ==2? parts[curDepth]:0;
		int end = fanType== 4 || fanType==3? dparts[curDepth]:61;
		int first = -2,last=-2;
		for(int i=start;i<=end;i++){
			if(node.children.containsKey(i)){
				if(first==-2) first = i;
				last = i;
			}
		}
		System.out.println("First"+first+"last"+last);
		if(curDepth>wantedDepth){
			System.out.println("herdde");
			for(int i=0;i<=61;i++){
				if(node.children.containsKey(i))
					getAll(node.children.get(i),parts,dparts,answer,curDepth+1,wantedDepth,1); // granularity reached

			}
			return;
		}
		// not yet reached
		// if no child
		if(first==-2) return;
		if(first==last){
			System.out.println("here");
			int send=1;
			if(first == parts[curDepth] || first == dparts[curDepth]){
				if((fanType == 3 || fanType ==4) && first == dparts[curDepth]) send = 3;
				if((fanType == 2 || fanType ==4) && first == parts[curDepth]) send = 2;
				/*if(fanType==2 || fanType==1) send = 1;
				if(fanType==3 || fanType ==4) send = fanType;*/
				
			}
			
			getAll(node.children.get(first),parts,dparts,answer,curDepth+1,wantedDepth,send);
			return;
		}
		for(int i=first;i<=last;i++){
			System.out.println("rather");
			if(node.children.containsKey(i)){
				if(i==first)
					getAll(node.children.get(i),parts,dparts,answer,curDepth+1,wantedDepth,fanType==1?1:2);

				else if(i==last)
					getAll(node.children.get(i),parts,dparts,answer,curDepth+1,wantedDepth,fanType==1?1:3);

				else 
					getAll(node.children.get(i),parts,dparts,answer,curDepth+1,wantedDepth,1);
			}
		}
	}
	public static void main(String[] args){
		/*put(1, "2017:01:01:23:59:59");
		put(2, "2017:01:02:23:59:59");
		System.out.println(retrieve("2017:01:02:23:59:59","2017:01:02:23:59:59","Second"));*/
		put(1, "2017:01:01:23:59:59");
		put(2, "2017:01:01:22:59:59");
		put(3, "2016:01:01:00:00:00");
		traverse(root);
		//System.out.println(retrieve("2016:01:01:01:01:01","2017:01:01:23:00:00","Year"));
		//System.out.println(retrieve("2016:01:01:01:01:01","2017:01:01:23:00:00","Hour"));
		//put(1,"2017:01:01:23:59:59");
		//put(2,"2003:12:12:20:30:51");
		//traverse(root);
		//System.out.println(retrieve("2017:01:01:23:59:58","2017:01:01:23:59:58","Second"));
	}
}

class Log{
	Map<Integer,Log> children;
	String data;
	public Log(String d){
		data=d;
		children = new TreeMap<Integer,Log>();
	}
}
