import os
import numpy
from sklearn.feature_extraction.text import CountVectorizer
from pandas import DataFrame
from sklearn.naive_bayes import MultinomialNB

NEWLINE = '\n'
SKIP_FILES = {'cmds'}


def read_files(path):
    for root, dir_names, file_names in os.walk(path):
        for path in dir_names:
            read_files(os.path.join(root, path))
        for file_name in file_names:
            if file_name not in SKIP_FILES:
                file_path = os.path.join(root, file_name)
                if os.path.isfile(file_path):
                    past_header, lines = False, []
                    f = open(file_path,encoding="latin-1")
                    for line in f:
                        if past_header:
                            lines.append(line)
                        elif line == NEWLINE:
                            past_header = True
                    f.close()
                    content = NEWLINE.join(lines)
                    yield file_path, content
                    


def build_data_frame(path, classification):
    rows = []
    index = []
    for file_name, text in read_files(path):
        rows.append({'text': text, 'class': classification})
        index.append(file_name)
    
    data_frame = DataFrame(rows, index=index)
    return data_frame



if __name__ == "__main__":
    HAM = 'ham'
    SPAM = 'spam'

    SOURCES = [
        ("/home/jatsakthi/SML/classification/Document Classification/Spam-Ham/Dataset/Spam",        SPAM),
        ("/home/jatsakthi/SML/classification/Document Classification/Spam-Ham/Dataset/Ham",        HAM),
        
    ]
    #SOURCES = [
    #    ("/home/jatsakthi/SML/classification/Data/Spam",        SPAM),
    #    ("/home/jatsakthi/SML/classification/Data/Ham",        HAM),
        
    #]
    data = DataFrame({'text': [], 'class': []})
    for path, classification in SOURCES:
        data = data.append(build_data_frame(path, classification))
        
    data = data.reindex(numpy.random.permutation(data.index))
    
    count_vectorizer = CountVectorizer()
    counts = count_vectorizer.fit_transform(data['text'].values)
    
    print counts;
    
    classifier = MultinomialNB()
    targets = data['class'].values
    classifier.fit(counts, targets)
    
    examples = ['Free Viagra call today!', "I'm going to attend the Linux users group tomorrow."]
    example_counts = count_vectorizer.transform(examples)
    predictions = classifier.predict(example_counts)
    print predictions # [1, 0]

    