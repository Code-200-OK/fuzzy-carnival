from pandas import DataFrame
import pandas as pd
import numpy
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.cross_validation import KFold
from sklearn.metrics import confusion_matrix
from sklearn.svm import SVC
from sklearn.cross_validation import train_test_split


def build_data_frame(path):
    df = pd.read_csv(path,usecols=['file','lyrics','mood'],index_col='file')
    return df

def create_tfidf_training_data(corpus):
    vectorizer = TfidfVectorizer(min_df=1)
    X = vectorizer.fit_transform(corpus)
    return X

def train_svm(X, y):
    svm = SVC(C=1000000.0, gamma='auto', kernel='rbf')
    svm.fit(X, y)
    return svm



if __name__ == "__main__":
    HAPPY = 1
    SAD = 0
    
    trainLocation = "/home/jatsakthi/SML/classification/Document Classification/Songs/Dataset/train_lyrics_1000.csv"
    testLocation = "/home/jatsakthi/SML/classification/Document Classification/Songs/Dataset/valid_lyrics_200.csv"
    
    data = DataFrame({'lyrics': [], 'mood': []})
    data = data.append(build_data_frame(trainLocation))
    data = data.reindex(numpy.random.permutation(data.index))
    
    tot = create_tfidf_training_data(data['lyrics'].values)
    '''
    k_fold = KFold(n=len(data), n_folds=2)
    scores = []
    confusion = numpy.array([[0, 0], [0, 0]])
    for train_indices, test_indices in k_fold:
        train_text = tot[train_indices]
        train_y = data.iloc[train_indices]['mood'].values
    
        test_text = tot[test_indices]
        test_y = data.iloc[test_indices]['mood'].values
        
        svm = train_svm(train_text, train_y)
        
        score = svm.score(test_text, test_y)
        pred = svm.predict(test_text)
        confusion += confusion_matrix(test_y, pred)
        scores.append(score)
        print score
    '''    
    X_train, X_test, y_train, y_test = train_test_split(
  tot, data['mood'].values, test_size=0.02, random_state=42
)
    # Create and train the Support Vector Machine
    svm = train_svm(X_train, y_train)
    
    # Make an array of predictions on the test set
    score = svm.score(X_test, y_test)
    pred = svm.predict(X_test)
    
    print('Total emails classified:', len(X_test.values))
    print('Score:', score)
    print('Confusion matrix:')
    print(confusion_matrix(y_test, pred))
    
    